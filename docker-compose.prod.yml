version: '3.8'

services:
    traefik:
        image: traefik:3.3               # Рекомендуется указать конкретную версию (например, 3.3.4)
        container_name: traefik
        restart: always
        command:
            - --api.dashboard=true
            # - --api.insecure=true       # (раскомментировать временно, чтобы зайти на http://<host>:8080/dashboard/)
            - --providers.docker=true
            - --providers.docker.exposedByDefault=false
            - --entrypoints.http.address=:80
            - --entrypoints.https.address=:443
            - --certificatesresolvers.letsEncrypt.acme.httpChallenge=true
            - --certificatesresolvers.letsEncrypt.acme.httpChallenge.entryPoint=http
            - --certificatesresolvers.letsEncrypt.acme.email=mail@2bstock.ru
            - --certificatesresolvers.letsEncrypt.acme.storage=/certs/acme.json
            - --log.level=INFO
        ports:
            - "80:80"
            - "443:443"
            - "8080:8080"    # Traefik dashboard (при insecure=true)
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - traefik-certs:/certs
        networks:
            - traefik-public
        labels:
            - traefik.enable=true
            
            # Глобальный роутер HTTP -> HTTPS
            - traefik.http.routers.http-catchall.rule=HostRegexp(chat.2bstock.ru) || Host(www.chat.2bstock.ru)
            - traefik.http.routers.http-catchall.entrypoints=http
            - traefik.http.routers.http-catchall.middlewares=frontend-redirect,redirect-to-https
            - traefik.http.routers.http-catchall.priority=1          # Низкий приоритет, чтобы не мешать ACME
            
            - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
            - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
            
            - traefik.http.middlewares.frontend-redirect.redirectregex.regex=^(https?://)www.chat.2bstock.ru/(.*)$$
            - traefik.http.middlewares.frontend-redirect.redirectregex.replacement=$${1}chat.2bstock.ru/$${2}
            - traefik.http.middlewares.frontend-redirect.redirectregex.permanent=true

    site:
        build:
            context: site
            dockerfile: docker/production/nginx/Dockerfile
#            args:
#                SOCKET_URL: https://chat.2bstock.ru
        container_name: site-nginx
        restart: always
        depends_on:
            - site-php-fpm
        expose:
            - "80"
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.http.routers.myapp.rule=Host(`chat.2bstock.ru`)
            - traefik.http.routers.myapp.entrypoints=https
            - traefik.http.routers.myapp.tls=true
            - traefik.http.routers.myapp.tls.certresolver=letsEncrypt
            - traefik.http.services.myapp.loadbalancer.server.port=80
            - traefik.docker.network=traefik-public    # Явно указать сеть для Traefik
    
    site-php-fpm:
        build:
            context: site
            dockerfile: docker/production/php-fpm/Dockerfile
        container_name: site-php-fpm
        restart: always
        environment:
            REDIS_SESSION_DSN: redis://redis-session:6379
            DATABASE_URL: pgsql://app:${POSTGRES_PASSWORD}@site-postgres:5432/app
            APP_ENV: prod
            APP_SECRET: ${APP_SECRET}
        networks:
            - default
        depends_on:
            - site-postgres
    site-php-cli:
        build:
            context: site
            dockerfile: docker/production/php-cli/Dockerfile
        container_name: site-php-cli
        environment:
            DATABASE_URL: pgsql://app:${POSTGRES_PASSWORD}@site-postgres:5432/app
            APP_ENV: prod
            APP_SECRET: ${APP_SECRET}
        networks:
            - default
        depends_on:
            - site-postgres
    site-postgres:
        image: postgres:15-alpine
        container_name: symfony-postgres
        restart: always
        environment:
            POSTGRES_DB: app
            POSTGRES_USER: app
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - default
    socket-server:
        build:
            context: socket-server
        container_name: socket-server
        restart: always
        ports:
            - "3001:3001"
        volumes:
            - ./socket-server:/app
        environment:
            SOCKET_PATH: /socket.io
            PORT: 3001
            REDIS_URL: redis://redis-realtime:6379
        networks:
            - traefik-public
            - default
        depends_on:
            - redis-realtime
        labels:
            - traefik.enable=true
            
            # Правило: тот же хост + префикс пути /socket.io
            - traefik.http.routers.socket.rule=Host(chat.2bstock.ru) && PathPrefix(/socket.io)
            
            # HTTPS-энтрипоинт и TLS (Traefik должен быть настроен с certresolver letsEncrypt)
            - traefik.http.routers.socket.entrypoints=https
            - traefik.http.routers.socket.tls=true
            - traefik.http.routers.socket.tls.certresolver=letsEncrypt
            
            # Проксируем на порт контейнера с сокетами
            - traefik.http.services.socket.loadbalancer.server.port=3001
            
            # Не срезаем путь! Socket.IO ожидает ровно /socket.io
            # (никаких StripPrefix, иначе отвалится)
    
    redis-realtime:
        image: redis:alpine
        container_name: redis-realtime
        restart: always
        
volumes:
    traefik-certs:
    postgres_data:

networks:
    traefik-public:
        external: true    # должна быть создана отдельно (или убрать external для автосоздания)
    default:
        driver: bridge