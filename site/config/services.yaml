# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
        # Базовый клиент к провайдеру

    # AI START Компоненты ----------------------------------------------------------------------------------------------------
    # Логгер для промптов (как у вас)
    App\Service\AI\AiPromptLogService: ~

    #Мок-провайдер (конкретный клиент)
    App\Service\AI\Provider\MockLlmClient: ~

    # Селектор провайдеров (всегда вернёт мок при AI_PROVIDER=mock)
    App\Service\AI\LlmClientSelector:
        arguments:
            $provider: '%ai.provider%'
            $mock: '@App\Service\AI\Provider\MockLlmClient'

    # Логирующий враппер — ВАЖНО: отключаем автоваер и явно подставляем $inner
    App\Service\AI\LlmClientWithLogging:
        autowire: false
        arguments:
            $inner: '@App\Service\AI\LlmClientSelector'        # <-- ключевая строка, разрывает цикл
            $logger: '@App\Service\AI\AiPromptLogService'

    # Главный alias интерфейса — на логгера (который зовёт селектор -> мок)
    App\Service\AI\LlmClient: '@App\Service\AI\LlmClientWithLogging'

    # (Не обязательно) OpenAI клиент можно оставить, но без алиасов/декораторов
    App\Service\AI\OpenAiClient:
        arguments:
            $http: '@http_client'
            $apiKey: '%env(string:OPENAI_API_KEY)%'
            $baseUrl: 'https://api.openai.com/v1'

    # AI END Компоненты ------------------------------------------------------------------------------------------------
    App\Service\Messaging\TelegramService:
        arguments:
            $http: '@http_client'
            $logger: '@logger'

    App\Service\Messaging\MessageIngressService: ~

    App\Service\Messaging\MessageEgressService:
        arguments:
            $adapters:
                - '@App\Service\Messaging\Channel\TelegramChannelAdapter'

    # Telegram adapter
    App\Service\Messaging\Channel\TelegramChannelAdapter: ~

    # Suggestion
    App\AI\ConversationContextProvider: ~

    App\AI\SuggestionPromptBuilder:
        arguments:
            $maxSuggestions: 4

    App\AI\SuggestionRateLimiter:
        arguments:
            $cache: '@cache.app'
            $ttlSeconds: '%ai.suggestions.rate_limit_seconds%'

    App\AI\SuggestionService:
        arguments:
            $model: '%ai.suggestions.model%'
            $temperature: '%ai.suggestions.temperature%'
            $maxHistory: '%ai.suggestions.max_history%'
            $maxChars: '%ai.suggestions.max_chars%'
            $timeoutSeconds: '%ai.suggestions.timeout_seconds%'

    App\AI\AiSuggestionContextService:
        arguments:
            $maxContextChars: '%ai.suggestions.max_company_context_chars%'

    App\Service\AI\KnowledgeSearchService:
        arguments:
            $cache: '@cache.app'
            $ttlSeconds: '%env(int:AI_KNOWLEDGE_CACHE_TTL)%'
            $topN: '%env(int:AI_KNOWLEDGE_TOP_N)%'

    App\EventSubscriber\Knowledge\CompanyKnowledgeChangedSubscriber: ~

    # Message END Компоненты -------------------------------------------------------------------------------------------

