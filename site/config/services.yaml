# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    _instanceof:
        App\Service\Messaging\Port\ChannelAdapterInterface:
            tags: ['app.messaging.channel_adapter']

    session.redis_connection:
        class: Predis\ClientInterface
        factory: ['Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection']
        arguments:
            - '%env(resolve:REDIS_SESSION_DSN)%'

    session.handler.redis:
        class: Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler
        arguments:
            - '@session.redis_connection'
            - { prefix: 'session:' }

    # Отдельный клиент для realtime (можно оставить тем же DSN)
    realtime.redis:
        class: Predis\Client
        arguments: ['%env(REDIS_DSN)%']

    App\Service\Realtime\RealtimePublisher: '@App\Service\Realtime\PredisRealtimePublisher'

    App\Service\Realtime\PredisRealtimePublisher:
        arguments:
            $redis: '@realtime.redis'
            $logger: '@monolog.logger.realtime'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
        # Базовый клиент к провайдеру
    App\EventSubscriber\Http\LogSuggestionRequestSubscriber:
        tags: [ kernel.event_subscriber ]

    app.monolog.handler.telegram:
        class: Monolog\Handler\TelegramBotHandler
        arguments:
            $apiKey: '%env(TELEGRAM_BOT_TOKEN)%'
            $channel: '%env(TELEGRAM_CHAT_ID)%'
            $level: 'error'
            $bubble: true
            $parseMode: null
            $disableWebPagePreview: true
            $disableNotification: false

    # AI START Компоненты ----------------------------------------------------------------------------------------------------
    # Логгер для промптов (как у вас)
    App\Service\AI\AiPromptLogService: ~

    #Мок-провайдер (конкретный клиент)
    App\Service\AI\Provider\MockLlmClient: ~

    # Селектор провайдеров (всегда вернёт мок при AI_PROVIDER=mock)
    App\Service\AI\LlmClientSelector:
        arguments:
            $provider: '%ai.provider%'
            $mock: '@App\Service\AI\Provider\MockLlmClient'

    # Логирующий враппер — ВАЖНО: отключаем автоваер и явно подставляем $inner
    App\Service\AI\LlmClientWithLogging:
        autowire: false
        arguments:
            $inner: '@App\Service\AI\LlmClientSelector'        # <-- ключевая строка, разрывает цикл
            $logger: '@App\Service\AI\AiPromptLogService'

    # Главный alias интерфейса — на логгера (который зовёт селектор -> мок)
    App\Service\AI\LlmClient: '@App\Service\AI\LlmClientWithLogging'

    # (Не обязательно) OpenAI клиент можно оставить, но без алиасов/декораторов
    App\Service\AI\OpenAiClient:
        arguments:
            $http: '@http_client'
            $apiKey: '%env(string:OPENAI_API_KEY)%'
            $baseUrl: 'https://api.openai.com/v1'

    # AI END Компоненты ------------------------------------------------------------------------------------------------
    App\Service\Messaging\TelegramService:
        arguments:
            $http: '@http_client'
            $logger: '@logger'

    App\Service\Messaging\MessageIngressService: ~

    App\Service\Messaging\MessagePipeline:
        arguments:
            $middlewares: !tagged_iterator app.messaging.middleware

    App\Service\Messaging\Middleware\NormalizeMiddleware:
        tags:
            - { name: 'app.messaging.middleware', priority: 300 }

    App\Service\Messaging\Middleware\PersistMiddleware:
        tags:
            - { name: 'app.messaging.middleware', priority: 200 }

    App\Service\Messaging\Middleware\AiEnrichMiddleware:
        tags:
            - { name: 'app.messaging.middleware', priority: 100 }

    App\Service\Messaging\MessageEgressService:
        arguments:
            $adapters: !tagged_iterator 'app.messaging.channel_adapter'

    # Telegram adapter
    App\Service\Messaging\Channel\TelegramChannelAdapter: ~
    App\Service\Messaging\Channel\WebChannelAdapter: ~

    # Suggestion
    App\AI\ConversationContextProvider: ~

    App\AI\SuggestionPromptBuilder:
        arguments:
            $maxSuggestions: 4

    App\AI\SuggestionRateLimiter:
        arguments:
            $cache: '@cache.app'
            $ttlSeconds: '%ai.suggestions.rate_limit_seconds%'

    App\Service\RateLimiter\VisitorMessageRateLimiter:
        arguments:
            $limit: 50
            $intervalSeconds: 60
            $cacheNamespace: 'webchat_messages'

    App\AI\SuggestionService:
        arguments:
            $model: '%ai.suggestions.model%'
            $temperature: '%ai.suggestions.temperature%'
            $maxHistory: '%ai.suggestions.max_history%'
            $maxChars: '%ai.suggestions.max_chars%'
            $timeoutSeconds: '%ai.suggestions.timeout_seconds%'

    App\AI\AiSuggestionContextService:
        arguments:
            #$maxContextChars: '%env(default:1200:int:AI_MAX_CONTEXT_CHARS)%'
            $maxContextChars: '%ai.suggestions.max_company_context_chars%'

    App\Service\AI\KnowledgeSearchService:
        arguments:
            $cache: '@cache.app'
            $ttlSeconds: '%env(int:AI_KNOWLEDGE_CACHE_TTL)%'
            $topN: '%env(int:AI_KNOWLEDGE_TOP_N)%'

    App\EventSubscriber\Knowledge\CompanyKnowledgeChangedSubscriber: ~

    # Message END Компоненты -------------------------------------------------------------------------------------------

