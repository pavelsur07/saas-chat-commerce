<?php

namespace App\AI;

use App\Entity\Company\Company;
use App\Repository\Messaging\ClientRepository;
use App\Service\AI\AiFeature;
use App\Service\AI\LlmClient;
use Psr\Log\LoggerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;

final class SuggestionService
{


    public function __construct(
        private readonly LlmClient $llm,
        private readonly ConversationContextProvider $contextProvider,
        private readonly SuggestionPromptBuilder $promptBuilder,
        private readonly ClientRepository $clients,
        #[Autowire('%ai.suggestions.model%')] private readonly string $model = 'gpt-4o-mini',
        #[Autowire('%ai.suggestions.temperature%')] private readonly float $temperature = 0.7,
        #[Autowire('%ai.suggestions.max_history%')] private readonly int $maxHistory = 12,
        #[Autowire('%ai.suggestions.max_chars%')] private readonly int $maxChars = 4000,
        #[Autowire('%ai.suggestions.timeout_seconds%')] private readonly int $timeoutSeconds = 10,
        // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á—ë–Ω
        private readonly ?AiSuggestionContextService $contextService = null,
        private readonly LoggerInterface $logger
    ) {
    }

    /**
     * @return string[] max 4 suggestions
     */
    public function suggest(Company $company, string $clientId): array
    {
        // 1) –°–∏–≥–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ ‚Äî —á—Ç–æ–±—ã –Ω–∞ –ø—Ä–æ–¥–µ –Ω–∞–∫–æ–Ω–µ—Ü –ø–æ—è–≤–∏–ª–∏—Å—å —Å–ª–µ–¥—ã
        // –õ–æ–≥–µ—Ä —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–µ; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ LoggerInterface –≤ __construct
        $this->logger->info('AI_SUGGEST_START', [
            'company_id' => (string) $company->getId(),
            'client_id'  => $clientId,
        ]);

        $started = microtime(true);

        try {
            // 2) –°–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–í–ê–® —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞—é)
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ —É –≤–∞—Å —Ç—É—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è $system/$user/$messages –∏–ª–∏ $prompt
            // –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é.
            $prompt = $this->buildPrompt($company, $clientId); // <- —ç—Ç–æ –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            // –ï—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –±—ã–ª–æ, –≤–∞–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∞–ª—å—à–µ –ø–∞—Ä—Å–∏–Ω–≥

            // 3) –í—ã–∑–æ–≤ LLM (–í–ê–® —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç) ‚Äî –Ω–µ –º–µ–Ω—è—é, —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è—é ¬´—Å—ã—Ä–æ–π¬ª –æ—Ç–≤–µ—Ç
            // –ù–∞–ø—Ä–∏–º–µ—Ä:
            $raw = $this->llm->complete($prompt, [
                'timeout' => 10, // –º—è–≥–∫–∏–π —Ç–∞–π–º–∞—É—Ç (–µ—Å–ª–∏ –≤–∞—à –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
            ]);

            // 4) –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç (–æ–±—Ä–µ–∂–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –ª–æ–≥)
            $preview = is_string($raw) ? mb_substr($raw, 0, 1200) : json_encode($raw, JSON_UNESCAPED_UNICODE);
            $this->logger->info('AI_SUGGEST_RAW', [
                'took_ms' => (int) ((microtime(true) - $started) * 1000),
                'raw'     => $preview,
            ]);

            // 5) –£–°–¢–û–ô–ß–ò–í–´–ô –ü–ê–†–°–ò–ù–ì
            $items = $this->parseSuggestionsRobust($raw);

            // 6) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            $items = array_values(array_filter(array_map(static function ($v) {
                $s = trim((string) $v);
                // –≤—ã—Ä–µ–∑–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏/–º–∞—Ä–∫–¥–∞—É–Ω –ø–æ –∫—Ä–∞—è–º
                $s = trim($s, "` \t\n\r\0\x0B");
                return $s;
            }, $items)));

            if (count($items) > 4) {
                $items = array_slice($items, 0, 4);
            }

            // 7) –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤–µ—Ä–Ω—ë–º —è—Å–Ω—ã–π fallback, —á—Ç–æ–±—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–∏–¥–µ–ª —Å –ø—É—Å—Ç—ã–º —ç–∫—Ä–∞–Ω–æ–º
            if (empty($items)) {
                $this->logger->warning('AI_SUGGEST_EMPTY_AFTER_PARSE');
                $items = [
                    '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä/—Ü–≤–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                    '–ö—É–¥–∞ —É–¥–æ–±–Ω–µ–µ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–æ–º?',
                    '–ò—â–µ—Ç–µ –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å? –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å üëç',
                    '–ï—Å–ª–∏ –≤–∞–∂–Ω–æ –±—ã—Å—Ç—Ä–æ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Å–µ–π—á–∞—Å.',
                ];
            }

            $this->logger->info('AI_SUGGEST_OK', [
                'count'   => count($items),
                'took_ms' => (int) ((microtime(true) - $started) * 1000),
            ]);

            return $items;
        } catch (\Throwable $e) {
            // 8) –õ—é–±–∞—è –æ—à–∏–±–∫–∞ ‚Äî –Ω–µ —Ä–æ–Ω—è–µ–º UI, –¥–∞—ë–º fallback –∏ –ª–æ–≥–∏—Ä—É–µ–º
            $this->logger->error('AI_SUGGEST_FAIL', [
                'error' => $e->getMessage(),
                'type' => $e::class,
                'took_ms' => (int)((microtime(true) - $started) * 1000),
            ]);

            return [
                '–ú–æ–≥—É –ø–æ–º–æ—á—å! –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–¥–µ–ª—å/—Ü–≤–µ—Ç/—Ä–∞–∑–º–µ—Ä?',
                '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫—É–¥–∞ —É–¥–æ–±–Ω–µ–µ –¥–æ—Å—Ç–∞–≤–∫–∞: –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–æ–º?',
                '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –±–ª–∏–∂–∞–π—à—É—é –≥–æ—Ç–æ–≤—É—é –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–∏—Ü–∏—é üëç',
                '–û–ø–∏—à–∏—Ç–µ, –¥–ª—è –∫–∞–∫–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/—É—Å–ª–æ–≤–∏–π –∏—â–µ—Ç–µ ‚Äî –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç—ã.',
            ];
        }
    }

    /**
    * –£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä JSON –æ—Ç LLM.
    * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞:
    *  - ```json { "suggestions": ["..."] } ```
    *  - —Ç–µ–∫—Å—Ç –¥–æ/–ø–æ—Å–ª–µ JSON
    *  - –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    *  - –∑–∞–ø—è—Ç—ã–µ –≤ –∫–æ–Ω—Ü–µ
    *  - –∫–æ–¥ –≤ Markdown
    * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏–ª–∏ [].
    */
    private function parseSuggestionsRobust(mixed $raw): array
    {
        // 0) –ï—Å–ª–∏ —É–∂–µ –º–∞—Å—Å–∏–≤ —Å –∫–ª—é—á–æ–º suggestions ‚Äî –≤–µ—Ä–Ω—ë–º —Å—Ä–∞–∑—É
        if (is_array($raw)) {
            if (isset($raw['suggestions']) && is_array($raw['suggestions'])) {
                return $raw['suggestions'];
            }
            // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ ‚Äî —Ç–æ–∂–µ –æ–∫
            if ($this->isFlatStringArray($raw)) {
                return $raw;
            }
            // –ò–Ω–∞—á–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
            $raw = json_encode($raw, JSON_UNESCAPED_UNICODE);
        }

        if (!is_string($raw)) {
            return [];
        }

        $s = trim($raw);

        // 1) –£–±–∏—Ä–∞–µ–º –∫–æ–¥-—Ñ–µ–Ω—Å—ã ```...```
        if (str_starts_with($s, '```')) {
            $s = preg_replace('/^```[a-zA-Z]*\s*/u', '', $s);
            $s = preg_replace('/```$/u', '', $s);
            $s = trim($s);
        }

        // 2) –ï—Å–ª–∏ —ç—Ç–æ ¬´—á–∏—Å—Ç—ã–π¬ª JSON ‚Äî –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
        $decoded = json_decode($s, true);
        if (is_array($decoded)) {
            if (isset($decoded['suggestions']) && is_array($decoded['suggestions'])) {
                return $decoded['suggestions'];
            }
            if ($this->isFlatStringArray($decoded)) {
                return $decoded;
            }
        }

        // 3) –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º "suggestions" –∏–∑ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if (preg_match('/\{.*"suggestions"\s*:\s*\[.*?\].*\}/su', $s, $m)) {
            $candidate = $m[0];

            // –õ–µ—á–∏–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ‚Üí –¥–≤–æ–π–Ω—ã–µ (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ)
            if (!str_contains($candidate, '"suggestions"')) {
                $candidate = str_replace("'", '"', $candidate);
            }

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏ `,]` –∏ `,}`
            $candidate = preg_replace('/,(\s*[\]\}])/u', '$1', $candidate);

            $decoded2 = json_decode($candidate, true);
            if (is_array($decoded2) && isset($decoded2['suggestions']) && is_array($decoded2['suggestions'])) {
                return $decoded2['suggestions'];
            }
        }

        // 4) –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ " - ..." / "1) ..." / "‚Ä¢ ..." (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å)
        $lines = preg_split('/\r\n|\r|\n/', $s);
        $guessed = [];
        foreach ($lines as $line) {
            $line = trim($line);
            if ($line === '') continue;
            // –±–µ—Ä–µ–º —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
            if (preg_match('/^(\d+[\)\.\-]|[-‚Ä¢\*])\s*(.+)$/u', $line, $mm)) {
                $guessed[] = trim($mm[2]);
            }
        }
        if (!empty($guessed)) {
            return $guessed;
        }

        return [];
    }

    private function isFlatStringArray(array $a): bool
    {
        foreach ($a as $v) {
            if (!is_string($v)) {
                return false;
            }
        }
        return true;
    }
}
