<?php

namespace App\AI;

use App\Entity\Company\Company;
use App\Repository\Messaging\ClientRepository;
use App\Service\AI\AiFeature;
use App\Service\AI\LlmClient;
use Symfony\Component\DependencyInjection\Attribute\Autowire;

final class SuggestionService
{
    private const FALLBACK_SUGGESTIONS = [
        '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä/—Ü–≤–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
        '–ö—É–¥–∞ —É–¥–æ–±–Ω–µ–µ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–æ–º?',
        '–ò—â–µ—Ç–µ –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å? –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å üëç',
        '–ï—Å–ª–∏ –≤–∞–∂–Ω–æ –±—ã—Å—Ç—Ä–æ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Å–µ–π—á–∞—Å.',
    ];

    public function __construct(
        private readonly LlmClient $llm,
        private readonly ConversationContextProvider $contextProvider,
        private readonly SuggestionPromptBuilder $promptBuilder,
        private readonly ClientRepository $clients,
        #[Autowire('%ai.suggestions.model%')] private readonly string $model = 'gpt-4o-mini',
        #[Autowire('%ai.suggestions.temperature%')] private readonly float $temperature = 0.7,
        #[Autowire('%ai.suggestions.max_history%')] private readonly int $maxHistory = 12,
        #[Autowire('%ai.suggestions.max_chars%')] private readonly int $maxChars = 4000,
        #[Autowire('%ai.suggestions.timeout_seconds%')] private readonly int $timeoutSeconds = 10,
        // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á—ë–Ω
        private readonly ?AiSuggestionContextService $contextService = null,
    ) {
    }

    /**
     * @return array{suggestions:string[], knowledgeHitsCount:int}
     */
    public function suggest(Company $company, string $clientId): array
    {
        $fallback = self::FALLBACK_SUGGESTIONS;

        // 1) –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ: –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
        try {
            $context = $this->contextProvider->getContext($clientId, $this->maxHistory, $this->maxChars);
        } catch (\Throwable $e) {
            $context = [];
        }

        // 2) –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–µ–ø–ª–∏–∫–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è –∑–Ω–∞–Ω–∏–π)
        $lastUserText = '';
        for ($i = count($context) - 1; $i >= 0; --$i) {
            if (($context[$i]['role'] ?? '') === 'user') {
                $lastUserText = (string) ($context[$i]['text'] ?? '');
                break;
            }
        }
        if ('' === $lastUserText && !empty($context)) {
            $last = $context[count($context) - 1];
            $lastUserText = (string) ($last['text'] ?? '');
        }

        // 3) –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏ (ToV/–∑–Ω–∞–Ω–∏—è) + —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞
        $companyBlock = '';
        $normQuery = '';
        $knowledgeHitsCount = 0;
        if ($this->contextService) {
            try {
                $companyBlock = $this->contextService->buildBlock($company, $lastUserText, 5);
                $normQuery = $this->contextService->normalizeQuery($lastUserText);
                $knowledgeHitsCount = $this->contextService->getLastHitsCount();
            } catch (\Throwable $e) {
                $companyBlock = '';
                $normQuery = '';
                $knowledgeHitsCount = 0;
            }
        }

        // 4) SYSTEM –ø—Ä–∞–≤–∏–ª–∞ + –±—Ä–µ–Ω–¥-–∫–æ–Ω—Ç–µ–∫—Å—Ç
        $system = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON {\"suggestions\":[...]}. \n\n"
            .$this->promptBuilder->buildSystemBlock(4, $companyBlock);

        // 5) –ò—Å—Ç–æ—Ä–∏—è –≤ ChatML
        $messages = [];
        $messages[] = ['role' => 'system', 'content' => $system];

        $prevRole = null;
        $prevText = null;
        foreach ($context as $row) {
            $role = (($row['role'] ?? 'user') === 'agent') ? 'assistant' : 'user';
            $text = trim((string) ($row['text'] ?? ''));
            if ('' === $text) {
                continue;
            }
            if ($role === $prevRole && $text === $prevText) {
                continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏ –ø–æ–¥—Ä—è–¥
            }
            $messages[] = ['role' => $role, 'content' => $text];
            $prevRole = $role;
            $prevText = $text;
        }

        // 6) –í—ã–∑–æ–≤ LLM ‚Äî –µ—Å–ª–∏ —É–ø–∞–¥—ë—Ç, –≤–µ—Ä–Ω—ë–º –ø–æ–Ω—è—Ç–Ω—ã–π fallback, —á—Ç–æ–±—ã UI –Ω–µ –ø—É—Å—Ç–µ–ª
        try {
            $result = $this->llm->chat([
                'company' => $company,
                'feature' => AiFeature::AGENT_SUGGEST_REPLY->value,
                'channel' => 'api',
                'model' => $this->model,
                'messages' => $messages,
                'temperature' => $this->temperature,
                'max_tokens' => 400,
                'timeout' => $this->timeoutSeconds,
                'metadata' => [
                    'search' => [
                        'raw_query' => (string) $lastUserText,
                        'norm_query' => (string) $normQuery,
                        'hits_count' => $knowledgeHitsCount,
                        'client_id' => $clientId,
                    ],
                ],
            ]);
        } catch (\Throwable $e) {
            return [
                'suggestions' => $fallback,
                'knowledgeHitsCount' => $knowledgeHitsCount,
            ];
        }

        // 7) –ü–∞—Ä—Å–∏–Ω–≥ ‚Äî —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ "–≥—Ä—è–∑–Ω–æ–º—É" JSON
        $content = (string) ($result['content'] ?? '');
        $itemsRaw = $this->parseSuggestionsRobust($content);

        if (!is_array($itemsRaw)) {
            $itemsRaw = [];
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —Å—Ç—Ä–æ–∫–∏, —Ç—Ä–∏–º, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
        $items = array_values(
            array_filter(
                array_map(
                    static function ($v) {
                        return trim((string) $v);
                    },
                    $itemsRaw
                ),
                static function ($s) {
                    return '' !== $s;
                }
            )
        );

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 4 —à—Ç—É–∫
        if (count($items) > 4) {
            $items = array_slice($items, 0, 4);
        }

        // –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤–µ—Ä–Ω—ë–º fallback, —á—Ç–æ–±—ã UI –Ω–µ –ø—É—Å—Ç–µ–ª
        if (empty($items)) {
            $items = $fallback;
        }

        return [
            'suggestions' => $items,
            'knowledgeHitsCount' => $knowledgeHitsCount,
        ];
    }

    /**
     * –£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä JSON –æ—Ç –º–æ–¥–µ–ª–∏ (```json ‚Ä¶```; –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç, –∑–∞–ø—è—Ç—ã–µ, –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏).
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.
     */
    private function parseSuggestionsRobust(string $raw): array
    {
        $s = trim($raw);
        if ('' === $s) {
            return [];
        }

        // –°–Ω–∏–º–∞–µ–º code fences ```...```
        if (str_starts_with($s, '```')) {
            $s = preg_replace('/^```[a-zA-Z]*\s*/u', '', $s);
            $s = preg_replace('/```$/u', '', $s);
            $s = trim($s ?? '');
        }

        // –ü—Ä—è–º–∞—è –ø–æ–ø—ã—Ç–∫–∞
        $decoded = json_decode($s, true);
        if (is_array($decoded)) {
            if (isset($decoded['suggestions']) && is_array($decoded['suggestions'])) {
                return $decoded['suggestions'];
            }
            if ($this->isFlatStringArray($decoded)) {
                return $decoded;
            }
        }

        // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º JSON-–æ–±—ä–µ–∫—Ç —Å "suggestions" –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if (preg_match('/\{.*"suggestions"\s*:\s*\[.*?\].*\}/su', $s, $m)) {
            $candidate = $m[0];

            // –ß–∏–Ω–∏–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ ] –∏–ª–∏ }
            $candidate = preg_replace('/,(\s*[\]\}])/u', '$1', $candidate);
            $decoded2 = json_decode($candidate, true);

            if (!is_array($decoded2)) {
                // –ü—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                $candidate2 = str_replace("'", '"', $candidate);
                $decoded2 = json_decode($candidate2, true);
            }

            if (is_array($decoded2) && isset($decoded2['suggestions']) && is_array($decoded2['suggestions'])) {
                return $decoded2['suggestions'];
            }
        }

        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
        $lines = preg_split('/\r\n|\r|\n/', $s);
        $out = [];
        foreach ($lines as $line) {
            $line = trim($line);
            if ('' === $line) {
                continue;
            }
            if (preg_match('/^(\d+[\)\.-]|[-‚Ä¢\*])\s*(.+)$/u', $line, $mm)) {
                $out[] = trim($mm[2]);
            }
        }

        return $out;
    }

    private function isFlatStringArray(array $a): bool
    {
        foreach ($a as $v) {
            if (!is_string($v)) {
                return false;
            }
        }

        return true;
    }
}
