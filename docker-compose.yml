services:
  traefik:
    image: traefik:3.3
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --api.insecure=true                  # в dev включаем дашборд на :8080
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [traefik-public]

  site:
    build:
      context: site/docker
      dockerfile: development/nginx/Dockerfile
    volumes:
      - ./site:/app
    networks:
      - traefik-public
      - backend              # ← явная общая сеть с php-fpm
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.site.rule=Host(`localhost`)
      - traefik.http.routers.site.entrypoints=web
      - traefik.http.services.site.loadbalancer.server.port=80   # если в nginx listen 8080 — поставь 8080
    depends_on:
      - site-php-fpm         # ← порядок старта

  site-php-fpm:
    build:
      context: site/docker
      dockerfile: development/php-fpm/Dockerfile
    # container_name: site-php-fpm   # ← УДАЛИ эту строку, чтобы DNS по имени сервиса работал всегда
    volumes:
      - ./site:/app
    networks:
      - backend              # ← та же сеть, что у site


  site-php-cli:
    build:
      context: site/docker
      dockerfile: development/php-cli/Dockerfile
    container_name: site-php-cli
    working_dir: /app
    volumes:
      - ./site:/app
    command: php bin/console

  site-node-watch:
    image: node:18-alpine
    volumes:
      - ./site:/app
    working_dir: /app
    command: sh -c "yarn run watch"
    tty: true
    environment:
      SOCKET_URL: http://localhost:3001

  site-node-cli:
    image: node:18-alpine
    volumes:
      - ./site:/app
    working_dir: /app
    environment:
      SOCKET_URL: http://localhost:3001

  site-postgres:
    image: postgres:15-alpine
    container_name: site-postgres
    restart: always
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: secret
    volumes:
      - postgres_data:/var/lib/postgresql/data

  socket-server:
    build:
      context: ./socket-server
    ports:
      - "3001:3001"
    volumes:
      - ./socket-server:/app
    environment:
      PORT: 3001
      REDIS_URL: redis://redis-realtime:6379
      SOCKET_PATH: /socket.io
      SOCKET_ORIGIN: '*'
      NODE_ENV: 'dev'
    depends_on:
      - redis-realtime
    networks:
      - traefik-public
      - default

  redis-realtime:
    image: redis:alpine
    container_name: redis-realtime
    restart: always

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.adminer.rule=Host(`adminer.localhost`)
      - traefik.http.routers.adminer.entrypoints=web
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    depends_on:
      - site-postgres

volumes:
  postgres_data:

networks:
  traefik-public:
    name: traefik-public
    driver: bridge
  backend:
      driver: bridge
